<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

    <on-start>
        <evaluate
                expression="userService.getUserByUsername(currentUser.name)"
                result-type="ru.lephant.learning.spring.SomeFirmWebFlow.entities.User"
                result="flowScope.user"
        />
    </on-start>

    <view-state id="list" view="list.xhtml">
        <on-entry>
            <set value="new ru.lephant.learning.spring.SomeFirmWebFlow.searchcriteries.OrderThingSearchCriteria()"
                 type="ru.lephant.learning.spring.SomeFirmWebFlow.searchcriteries.OrderThingSearchCriteria"
                 name="viewScope.searchCriteria"/>
        </on-entry>

        <on-render>
            <evaluate expression="orderThingService.listOrders(searchCriteria, user)"
                      result="viewScope.orders"
                      result-type="dataModel"/>
        </on-render>

        <transition on="select" to="details">
            <set name="flowScope.orderId" value="viewScope.orders.selectedRow.id"/>
        </transition>

        <transition on="changeCriteria"/>
    </view-state>


    <view-state id="details" view="details.xhtml">
        <on-render>
            <evaluate
                    expression="orderThingService.getOrderById(flowScope.orderId)"
                    result-type="ru.lephant.learning.spring.SomeFirmWebFlow.entities.OrderThing"
                    result="conversationScope.order"
            />
            <evaluate expression="orderThingService.makeViewed(conversationScope.order, messageContext)"/>
        </on-render>

        <transition on="confirm">
            <evaluate
                    expression="orderThingService.changeOrderState(conversationScope.order, T(ru.lephant.learning.spring.SomeFirmWebFlow.enums.OrderState).DURING, messageContext)"/>
        </transition>

        <transition on="deny">
            <evaluate
                    expression="orderThingService.changeOrderState(conversationScope.order, T(ru.lephant.learning.spring.SomeFirmWebFlow.enums.OrderState).IS_DENIED, messageContext)"/>
        </transition>

        <transition on="createTeam" to="createTeam"/>

        <transition on="showTeam" to="showTeam"/>

        <transition on="complete">
            <evaluate
                    expression="orderThingService.changeOrderState(conversationScope.order, T(ru.lephant.learning.spring.SomeFirmWebFlow.enums.OrderState).DONE, messageContext)"/>
        </transition>

        <transition on="return" to="end"/>
    </view-state>


    <subflow-state id="createTeam" subflow="CreateTeam">
        <transition on="created" to="addTeamCreatedMessage"/>
        <transition on="end" to="details"/>
    </subflow-state>


    <action-state id="addTeamCreatedMessage">
        <evaluate expression="orderThingService.addCreateTeamMessage(messageContext)"/>
        <transition to="details"/>
    </action-state>


    <subflow-state id="showTeam" subflow="Team">
        <input name="teamId" value="conversationScope.order.team.id" type="long" required="true"/>
        <transition on="return" to="details"/>
    </subflow-state>


    <end-state id="end"/>

</flow>